{"version":3,"sources":["../index.ts"],"sourcesContent":["/**\r\n*  @year {2023}\r\n*  @author: Vedansh # <admin@override.ps1>\r\n*  @description: Customized Functions for Special Use using TypeScript.\r\n*  @language TypeScript v5.3.0 dev edition.\r\n*  @type {module}\r\n*  @copyright (c) override.ps1. All rights reserved.\r\n*/\r\n// <reference path=\"index.d.ts\" />\r\n\r\n/**\r\n * Logs a customized message to the console that looks like a info.\r\n * @param args - An array of arguments that will be logged to the console.\r\n */\r\nexport function info(...args: any[]): void {\r\n    console.log(`[info] >> [ ${args} ] << [info]`);\r\n}\r\n/**\r\n * Logs a formatted message to the console.\r\n * \r\n * @param args An array of arguments that will be logged to the console.\r\n * @example\r\n * trace(\"This is a log message\");\r\n * Logs: \"YYYY-MM-DD HH:MM:SS.MMM AM/PM [info] >> [ 'This is a log message' ] << [info]\"\r\n */\r\nexport function trace(...args: any[]): void {\r\n    const currentDate = new Date();\r\n    const hours = currentDate.getHours() > 12 ? currentDate.getHours() - 12 : currentDate.getHours();\r\n    const minutes = currentDate.getMinutes() < 10 ? `0${currentDate.getMinutes()}` : currentDate.getMinutes();\r\n    const seconds = currentDate.getSeconds() < 10 ? `0${currentDate.getSeconds()}` : currentDate.getSeconds();\r\n    const ampm = currentDate.getHours() >= 12 ? 'PM' : 'AM';\r\n    console.log(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${currentDate.getDate()} ${hours}:${minutes}:${seconds}.${currentDate.getMilliseconds()} ${ampm} [info] >> [ ${args} ] << [info]`);\r\n}\r\n/**\r\n * Generates a random player ID of length 10.\r\n * @returns A promise that resolves to a string or void, or a string, or null.\r\n * @example\r\n * const playerId = generatePlayerId();\r\n * console.log(playerId); // e.g. \"AbC123xyz\"\r\n */\r\nexport function generatePlayerId(): Promise<string | void> | string | null {\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n    let result = '';\r\n    let numCount = 0;\r\n    let charCount = 0;\r\n    for (let i = 0; i < 10; i++) {\r\n        if (numCount < 7 || (numCount >= 7 && charCount < 3 && Math.random() < 0.5)) {\r\n            result += characters.charAt(Math.floor(Math.random() * characters.length));\r\n            if (/[0-9]/.test(result.charAt(result.length - 1))) {\r\n                numCount++;\r\n            } else {\r\n                charCount++;\r\n            }\r\n        } else {\r\n            result += characters.charAt(Math.floor(Math.random() * 26) + 26);\r\n            charCount++;\r\n        }\r\n    }\r\n    return result ? result : null;\r\n}\r\n/**\r\n * Executes a callback function and handles any errors that occur during its execution.\r\n * @param test - The callback function that contains the code to be tested.\r\n * @param args - Additional arguments that can be passed to the callback function.\r\n * @returns void\r\n */\r\nexport function handleError(test: () => void, ...args: any[]): void {\r\n    try {\r\n        console.log(`\\n ======================= \\n`);\r\n        info('Begin Testing');\r\n        test();\r\n        info('End Testing');\r\n    } catch (error: any) {\r\n        console.log(`Some Error Occurred : ${error.message}`);\r\n    } finally {\r\n        console.log(`[ Function Has Successfully Executed and All the Errors are Handled. ]`);\r\n        console.log(`\\n ======================= \\n`);\r\n    }\r\n    return void (0);\r\n}\r\n/**\r\n * Generates all possible permutations of an array without repetition.\r\n * \r\n * @template T - The type of elements in the array.\r\n * @param {T[]} arr - The input array for which permutations need to be generated.\r\n * @returns {T[][]} - An array containing all possible permutations of the input array.\r\n * @example\r\n * const arr = [1, 2, 3];\r\n * const result = Permute(arr);\r\n * console.log(result);\r\n * Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 2, 1], [3, 1, 2]]\r\n */\r\nexport function Permute<T>(arr: T[]): T[][] {\r\n    const result: T[][] = [];\r\n\r\n    function backtrack(start: number, current: T[]) {\r\n        if (start === arr.length) {\r\n            result.push([...current]);\r\n            return;\r\n        }\r\n\r\n        for (let i = start; i < arr.length; i++) {\r\n            [arr[start], arr[i]] = [arr[i], arr[start]]; // Swap elements\r\n            current.push(arr[start]);\r\n            backtrack(start + 1, current);\r\n            current.pop();\r\n            [arr[start], arr[i]] = [arr[i], arr[start]]; // Revert the swap\r\n        }\r\n    }\r\n    backtrack(0, []);\r\n    return result;\r\n}\r\n\r\n/** \r\n * @satisfies the following Generic class and its functions.\r\n * @belongs to class and its subsidiary functions.\r\n */\r\nexport interface KeyValuePair<K, V> {\r\n    key: K;\r\n    value: V;\r\n}\r\n/**\r\n * Generic function to create a KeyValuePair asynchronously.\r\n * \r\n * @param key - The key of the KeyValuePair.\r\n * @param value - The value of the KeyValuePair.\r\n * @returns A Promise that resolves to a KeyValuePair object.\r\n * @example\r\n * const numberStringPair = await createKeyValuePair<number, string>(1, \"TypeScript\");\r\n * numberStringPair is { key: 1, value: \"TypeScript\" }\r\n * \r\n * const stringBooleanPair = await createKeyValuePair<string, boolean>(\"isTrue\", true);\r\n * stringBooleanPair is { key: \"isTrue\", value: true }\r\n */\r\nasync function createKeyValuePair<K, V>(key: K, value: V): Promise<KeyValuePair<K, V>> {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve({ key, value });\r\n        }, 2000);\r\n    });\r\n}\r\n/**\r\n * Creates a key-value pair using the provided key and value.\r\n * It is done via using Generic Programming.\r\n * @param key - The key for the key-value pair.\r\n * @param value - The value for the key-value pair.\r\n * @returns A Promise that resolves to void.\r\n */\r\nexport async function CreateKeyValuePair(key: any, value: any): Promise<void> {\r\n    const pair = await createKeyValuePair<typeof key, typeof value>(key, value);\r\n    console.log(`Created New KeyValuePair -> { ${pair.key} : ${pair.value} }\\n`);\r\n}\r\nclass Generic {\r\n    constructor(private username: string){}\r\n    rest(){}\r\n}\r\nexport class CursedConstructor extends Generic {\r\n    constructor() {\r\n        super('undefined');\r\n    }\r\n    /**\r\n     * Generates a random string of specified length, consisting of a combination of numbers and characters.\r\n     * @param length - The length of the random string to be generated. Default value is 10.\r\n     * @param numCount - The number of numeric characters to include in the random string. Default value is 7.\r\n     * @param charCount - The number of non-numeric characters to include in the random string. Default value is 3.\r\n     * @param useSymbols - Specifies whether to include symbols in the character pool. Default value is true.\r\n     * @param useUppercase - Specifies whether to include uppercase letters in the character pool. Default value is true.\r\n     * @param useLowercase - Specifies whether to include lowercase letters in the character pool. Default value is true.\r\n     * @returns A randomly generated string of specified length, consisting of a combination of numbers and characters.\r\n     */\r\n    public CreateRandomString(\r\n        length: number = 10,\r\n        numCount: number = 7,\r\n        charCount: number = 3,\r\n        useSymbols: boolean = true,\r\n        useUppercase: boolean = true,\r\n        useLowercase: boolean = true\r\n    ): string | null {\r\n\r\n        const characters = this.generateCharacterPool(useSymbols, useUppercase, useLowercase);\r\n        let result = '';\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            if (\r\n                (numCount > 0 || charCount > 0) &&\r\n                (numCount === 0 || (charCount === 0 && Math.random() < 0.5))\r\n            ) {\r\n                result += this.getRandomCharacter(characters, useUppercase);\r\n                charCount--;\r\n            } else {\r\n                result += this.getRandomCharacter('0123456789', false);\r\n                numCount--;\r\n            }\r\n        }\r\n\r\n        return result ? result : null;\r\n    }\r\n\r\n    /**\r\n     * Generates a string of characters based on the input parameters.\r\n     * \r\n     * @param useSymbols - Specifies whether to include symbols in the character pool.\r\n     * @param useUppercase - Specifies whether to include uppercase letters in the character pool.\r\n     * @param useLowercase - Specifies whether to include lowercase letters in the character pool.\r\n     * @returns A string of characters generated based on the input parameters.\r\n     */\r\n    public generateCharacterPool(\r\n        useSymbols: boolean,\r\n        useUppercase: boolean,\r\n        useLowercase: boolean\r\n    ): string {\r\n        let characters = '0123456789';\r\n        if (useSymbols) {\r\n            characters += '!@#$%^&*';\r\n        }\r\n        if (useUppercase) {\r\n            characters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        }\r\n        if (useLowercase) {\r\n            characters += 'abcdefghijklmnopqrstuvwxyz';\r\n        }\r\n        return characters;\r\n    }\r\n\r\n    /**\r\n     * Returns a random character from a given string of characters, with the option to convert uppercase characters to lowercase.\r\n     * \r\n     * @param characters - A string of characters from which a random character will be selected.\r\n     * @param useUppercase - A flag indicating whether uppercase characters should be used or not.\r\n     * @returns A single random character from the `characters` string, with the option to convert uppercase characters to lowercase.\r\n     */\r\n    public getRandomCharacter(characters: string, useUppercase: boolean): string {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        const randomChar = characters.charAt(randomIndex);\r\n        if (!useUppercase && /[A-Z]/.test(randomChar)) {\r\n            return randomChar.toLowerCase();\r\n        }\r\n        return randomChar;\r\n    }\r\n}\r\n/**\r\n * @author Vedansh Khandelwal\r\n * @lang TypeScript (ES6+)\r\n * @class Cursed for most of my perfect methods.\r\n * @readonly No Changes Should be made to this class.\r\n */\r\nexport var Cursed: CursedConstructor;\r\n/* EOF Reached */"],"mappings":"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","names":[]}